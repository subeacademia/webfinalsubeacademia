import { VercelRequest, VercelResponse } from '@vercel/node';

// Configuraci√≥n de CORS
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
  'Content-Type': 'application/json'
};

// Funci√≥n para manejar CORS
function handleCors(req: VercelRequest, res: VercelResponse) {
  if (req.method === 'OPTIONS') {
    res.writeHead(200, corsHeaders);
    res.end();
    return true;
  }
  return false;
}

// Funci√≥n para generar objetivos personalizados
export default async function handler(req: VercelRequest, res: VercelResponse) {
  // Manejar CORS
  if (handleCors(req, res)) return;

  try {
    // Verificar que sea una petici√≥n POST
    if (req.method !== 'POST') {
      res.writeHead(405, corsHeaders);
      res.end(JSON.stringify({ error: 'M√©todo no permitido' }));
      return;
    }

    const { messages, maxTokens = 1000, temperature = 0.7 } = req.body;

    if (!messages || !Array.isArray(messages)) {
      res.writeHead(400, corsHeaders);
      res.end(JSON.stringify({ error: 'Se requieren mensajes v√°lidos' }));
      return;
    }

    console.log('üöÄ Generando objetivos personalizados con IA...');
    console.log('üìä Mensajes recibidos:', messages.length);

    // Simular respuesta de IA para objetivos personalizados
    const objetivosGenerados = await generarObjetivosPersonalizados(messages);

    // Estructura de respuesta compatible con OpenAI
    const response = {
      choices: [
        {
          message: {
            role: 'assistant',
            content: objetivosGenerados
          },
          finish_reason: 'stop'
        }
      ],
      usage: {
        prompt_tokens: 100,
        completion_tokens: 200,
        total_tokens: 300
      }
    };

    res.writeHead(200, corsHeaders);
    res.end(JSON.stringify(response));

  } catch (error) {
    console.error('‚ùå Error en la API de Vercel:', error);
    res.writeHead(500, corsHeaders);
    res.end(JSON.stringify({ 
      error: 'Error interno del servidor',
      details: error instanceof Error ? error.message : 'Error desconocido'
    }));
  }
}

// Funci√≥n para generar objetivos personalizados
async function generarObjetivosPersonalizados(messages: any[]): Promise<string> {
  // Extraer el contexto del √∫ltimo mensaje del usuario
  const userMessage = messages.find(msg => msg.role === 'user');
  const context = userMessage?.content || '';

  console.log('üéØ Contexto del cliente:', context);

  // Analizar el contexto para generar objetivos personalizados
  const objetivos = analizarContextoYGenerarObjetivos(context);

  return JSON.stringify(objetivos);
}

// Funci√≥n para analizar contexto y generar objetivos
function analizarContextoYGenerarObjetivos(context: string): any {
  // Objetivos base que se adaptan seg√∫n el contexto
  const objetivosBase = [
    {
      id: "goal1",
      title: "Implementar un sistema de automatizaci√≥n de procesos clave para mejorar la eficiencia operativa en un 25%",
      smart: {
        specific: "Automatizar al menos 5 procesos manuales cr√≠ticos identificados en el diagn√≥stico",
        measurable: "Reducir tiempo de procesamiento en 25% y errores en 40%",
        achievable: "Con el presupuesto y recursos disponibles, implementable en 3-4 meses",
        relevant: "Alineado con la mejora de eficiencia operativa y reducci√≥n de costos",
        timeBound: "Completar implementaci√≥n en 4 meses m√°ximo"
      }
    },
    {
      id: "goal2", 
      title: "Desarrollar un programa de capacitaci√≥n en IA para el equipo, enfocado en herramientas espec√≠ficas del sector",
      smart: {
        specific: "Capacitar al 80% del equipo en herramientas de IA relevantes para su √°rea",
        measurable: "Certificar a 15 empleados y lograr 90% de satisfacci√≥n en la capacitaci√≥n",
        achievable: "Con recursos internos y externos disponibles, factible en 2-3 meses",
        relevant: "Esencial para la adopci√≥n exitosa de tecnolog√≠as de IA en la organizaci√≥n",
        timeBound: "Completar programa de capacitaci√≥n en 3 meses"
      }
    },
    {
      id: "goal3",
      title: "Establecer un sistema de an√°lisis de datos avanzado para optimizar la toma de decisiones estrat√©gicas",
      smart: {
        specific: "Implementar dashboard de BI con m√©tricas clave y alertas autom√°ticas",
        measurable: "Reducir tiempo de an√°lisis en 50% y mejorar precisi√≥n de decisiones en 30%",
        achievable: "Con herramientas disponibles y personal capacitado, realizable en 4-6 meses",
        relevant: "Cr√≠tico para la competitividad y crecimiento sostenible de la empresa",
        timeBound: "Sistema operativo en 6 meses"
      }
    },
    {
      id: "goal4",
      title: "Crear una estrategia de experiencia del cliente mejorada con herramientas de IA conversacional",
      smart: {
        specific: "Implementar chatbot inteligente y sistema de an√°lisis de sentimientos",
        measurable: "Aumentar satisfacci√≥n del cliente en 35% y reducir tiempo de respuesta en 50%",
        achievable: "Con tecnolog√≠a disponible y presupuesto asignado, factible en 3-5 meses",
        relevant: "Directamente impacta la retenci√≥n y crecimiento de clientes",
        timeBound: "Sistema en producci√≥n en 5 meses"
      }
    },
    {
      id: "goal5",
      title: "Implementar un marco de gobernanza de IA para asegurar el uso √©tico y responsable de la tecnolog√≠a",
      smart: {
        specific: "Crear pol√≠ticas, procedimientos y comit√© de √©tica para supervisar uso de IA",
        measurable: "100% de cumplimiento normativo y 0 incidentes de uso inadecuado de IA",
        achievable: "Con asesor√≠a legal y recursos internos, implementable en 4-5 meses",
        relevant: "Esencial para la sostenibilidad y reputaci√≥n a largo plazo",
        timeBound: "Marco operativo en 5 meses"
      }
    },
    {
      id: "goal6",
      title: "Desarrollar un laboratorio de innovaci√≥n para experimentar con nuevas tecnolog√≠as de IA",
      smart: {
        specific: "Crear espacio f√≠sico y virtual para pruebas de conceptos de IA emergentes",
        measurable: "Identificar 3-5 nuevas oportunidades de negocio y lanzar 2 pilotos",
        achievable: "Con presupuesto de innovaci√≥n y personal dedicado, realizable en 6-8 meses",
        relevant: "Posiciona a la empresa como l√≠der en innovaci√≥n tecnol√≥gica",
        timeBound: "Laboratorio operativo en 8 meses"
      }
    }
  ];

  // Personalizar objetivos seg√∫n el contexto
  let objetivosSeleccionados = objetivosBase;
  
  if (context.toLowerCase().includes('peque√±a') || context.toLowerCase().includes('startup')) {
    // Para empresas peque√±as, priorizar objetivos de bajo costo y r√°pida implementaci√≥n
    objetivosSeleccionados = objetivosBase.filter(obj => 
      obj.id === 'goal1' || obj.id === 'goal2' || obj.id === 'goal4'
    );
  }
  else if (context.toLowerCase().includes('grande') || context.toLowerCase().includes('corporaci√≥n')) {
    // Para empresas grandes, incluir objetivos de gobernanza y escalabilidad
    objetivosSeleccionados = objetivosBase.filter(obj => 
      obj.id === 'goal1' || obj.id === 'goal3' || obj.id === 'goal5' || obj.id === 'goal6'
    );
  }
  else if (context.toLowerCase().includes('tecnolog√≠a') || context.toLowerCase().includes('tech')) {
    // Para empresas de tecnolog√≠a, enfocarse en innovaci√≥n y desarrollo
    objetivosSeleccionados = objetivosBase.filter(obj => 
      obj.id === 'goal3' || obj.id === 'goal4' || obj.id === 'goal6'
    );
  }
  else if (context.toLowerCase().includes('servicios') || context.toLowerCase().includes('consultor√≠a')) {
    // Para empresas de servicios, priorizar CX y procesos
    objetivosSeleccionados = objetivosBase.filter(obj => 
      obj.id === 'goal1' || obj.id === 'goal2' || obj.id === 'goal4'
    );
  }
  
  // Devolver en el formato esperado por el frontend
  return {
    options: objetivosSeleccionados
  };
}

// Endpoint de salud
export async function health(req: VercelRequest, res: VercelResponse) {
  if (handleCors(req, res)) return;
  
  res.writeHead(200, corsHeaders);
  res.end(JSON.stringify({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    service: 'SUBE Academia AI API'
  }));
}
