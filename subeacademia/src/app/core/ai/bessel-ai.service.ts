import { Injectable, inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { firstValueFrom } from 'rxjs';
import { environment } from '../../../environments/environment';
import { Report, ReportData, StrategicInitiative, ExecutiveSummary } from '../../features/diagnostico/data/report.model';
import { competencias } from '../../features/diagnostico/data/competencias';

// Interfaz para los datos del diagn√≥stico
export interface DiagnosticData {
  profile: any;
  aresAnswers: any;
  compAnswers: any;
  riskLevel: any;
  lambdaComp: number;
  targetLevel: number;
  selectedGoals: any[];
}

@Injectable({
  providedIn: 'root'
})
export class BesselAiService {
  private http = inject(HttpClient);
  private apiUrl = environment.gptApiUrl;

  async generateReport(data: DiagnosticData, contextoAdicional: any): Promise<Report> {
    console.log('Iniciando la generaci√≥n de reporte con datos:', data);
    console.log('Contexto adicional (cursos):', contextoAdicional);

    const systemPrompt = `
      Eres un coach ejecutivo y analista de talento para "Sube Academia". Tu tarea es generar un informe de diagn√≥stico profesional y personalizado.
      Recibir√°s dos bloques de informaci√≥n del usuario:
      1.  Los datos del diagn√≥stico del usuario (objetivos, autoevaluaci√≥n, etc.).
      2.  Un JSON con el cat√°logo de cursos y servicios que ofrece "Sube Academia".

      Tu respuesta DEBE SER √öNICA Y EXCLUSIVAMENTE UN OBJETO JSON V√ÅLIDO, sin texto adicional, que coincida con esta interfaz de TypeScript:
      
      interface Report {
        titulo: string;
        resumen: string;
        analisisCompetencias: Array<{ competencia: string; puntaje: number; descripcion: string; sugerencia: string; }>;
        identificacionBrechas: string;
        planDeAccion: Array<{ area: string; acciones: Array<{ accion: string; descripcion: string; recursos: string[]; }>; }>;
        recomendacionesGenerales: string;
        alineacionObjetivos: string; // Explica c√≥mo el plan de acci√≥n ayuda a lograr el objetivo principal del usuario.
      }

      INSTRUCCIONES CLAVE:
      - En el 'planDeAccion', donde sea apropiado, recomienda expl√≠citamente cursos o servicios del cat√°logo proporcionado. Menciona el nombre del curso.
      - En el campo 'alineacionObjetivos', analiza el 'objetivo' del usuario (del JSON de diagn√≥stico) y redacta un p√°rrafo explicando c√≥mo el plan de acci√≥n que creaste le ayudar√° a alcanzarlo.
      - S√© profesional, alentador y orienta la acci√≥n.
      - NO INCLUYAS NING√öN TEXTO ANTES O DESPU√âS DEL OBJETO JSON. La respuesta debe empezar con '{' y terminar con '}'.
    `;

    const userPrompt = `
      Aqu√≠ est√°n mis datos del diagn√≥stico:
      ${JSON.stringify(data, null, 2)}

      Y aqu√≠ est√° el cat√°logo de cursos y servicios disponibles en Sube Academia para que los uses en tus recomendaciones:
      ${JSON.stringify(contextoAdicional, null, 2)}
    `;
    
    const payload = {
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ]
    };

    console.log('Enviando payload a la API:', JSON.stringify(payload));

    try {
      const response = await firstValueFrom(this.http.post<any>(this.apiUrl, payload));
      console.log('Respuesta cruda de la API:', response);

      let responseText = '';
      if (response?.choices?.[0]?.message?.content) {
        responseText = response.choices[0].message.content;
      } else {
        throw new Error('La respuesta de la API no tiene el formato esperado.');
      }
      
      console.log('Texto extra√≠do:', responseText);

      try {
        const cleanedText = responseText.replace(/^```json\n?/, '').replace(/\n?```$/, '');
        const report: Report = JSON.parse(cleanedText);
        console.log('Reporte parseado con √©xito:', report);
        return report;
      } catch (parseError) {
        console.error('Error fatal al parsear JSON:', parseError, 'Texto recibido:', responseText);
        throw new Error('La respuesta de la IA no es un objeto JSON v√°lido.');
      }
    } catch (error) {
      console.error('Error en la llamada a la API de Bessel:', error);
      throw error;
    }
  }

  async generarSugerenciasDeObjetivos(rol: string, industria: string): Promise<string[]> {
    console.log(`Generando sugerencias para rol: ${rol}, industria: ${industria}`);

    const systemPrompt = `
      Eres un experto en desarrollo profesional y coaching de carrera. 
      Tu √∫nica tarea es generar 3 sugerencias de objetivos SMART (espec√≠ficos, medibles, alcanzables, relevantes, con plazos) para una persona con un rol y en una industria espec√≠ficos.
      LA RESPUESTA DEBE SER √öNICA Y EXCLUSIVAMENTE UN ARRAY DE STRINGS EN FORMATO JSON V√ÅLIDO.
      Ejemplo de respuesta esperada: 
      ["Desarrollar un proyecto de an√°lisis de datos para optimizar un 15% los costos de log√≠stica en los pr√≥ximos 6 meses.", "Completar la certificaci√≥n avanzada en marketing digital para liderar la nueva campa√±a de producto en el Q4.", "Mejorar mis habilidades de liderazgo de equipos mediante un curso y la mentor√≠a de un nuevo miembro del equipo este semestre."]

      NO INCLUYAS NING√öN TEXTO INTRODUCTORIO, EXPLICACI√ìN, O CARACTERES ADICIONALES ANTES O DESPU√âS DEL ARRAY JSON.
      La respuesta debe empezar con '[' y terminar con ']'.
    `;

    const userPrompt = `Rol: '${rol}', Industria: '${industria}'`;

    const payload = {
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ]
    };

    console.log('Enviando payload para sugerencias:', JSON.stringify(payload));

    try {
      const response = await firstValueFrom(this.http.post<any>(this.apiUrl, payload));
      console.log('Respuesta cruda de la API para sugerencias:', response);

      let responseText = '';
      if (response?.choices?.[0]?.message?.content) {
        responseText = response.choices[0].message.content;
      } else {
        throw new Error('La respuesta de la API para sugerencias no tiene el formato esperado.');
      }
      
      console.log('Texto de sugerencias extra√≠do:', responseText);

      try {
        const cleanedText = responseText.replace(/^```json\n?/, '').replace(/\n?```$/, '');
        const sugerencias: string[] = JSON.parse(cleanedText);
        console.log('Sugerencias parseadas con √©xito:', sugerencias);
        if (!Array.isArray(sugerencias)) throw new Error('La respuesta no es un array.');
        return sugerencias;
      } catch (parseError) {
        console.error('Error fatal al parsear JSON de sugerencias:', parseError, 'Texto recibido:', responseText);
        throw new Error('La respuesta de la IA no es un array JSON v√°lido.');
      }
    } catch (error) {
      console.error('Error en la llamada a la API para generar sugerencias:', error);
      throw error;
    }
  }

  /**
   * NUEVO M√âTODO: Genera un reporte estrat√©gico de alto nivel usando el framework ARES-AI
   */
  async generateStrategicReport(data: DiagnosticData, contextoAdicional: any): Promise<ReportData> {
    console.log('üöÄ Iniciando generaci√≥n de reporte estrat√©gico con datos:', data);
    console.log('üìö Contexto adicional (cursos):', contextoAdicional);

    // Construir el contexto de la empresa
    const companyContext = {
      industry: data.profile?.industry || 'No especificada',
      size: data.profile?.companySize || 'No especificada',
      mainObjective: data.profile?.mainObjective || 'No especificado'
    };

    // Calcular puntuaciones ARES y de competencias
    const aresScores = this.calculateAresScores(data.aresAnswers);
    const competencyScores = this.calculateCompetencyScores(data.compAnswers);

    const systemPrompt = this.buildStrategicSystemPrompt();
    const userPrompt = this.buildStrategicUserPrompt(aresScores, competencyScores, companyContext, contextoAdicional);
    
    const payload = {
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userPrompt }
      ]
    };

    console.log('üì§ Enviando payload estrat√©gico a la API:', JSON.stringify(payload));

    try {
      const response = await firstValueFrom(this.http.post<any>(this.apiUrl, payload));
      console.log('üì• Respuesta cruda de la API:', response);

      let responseText = '';
      if (response?.choices?.[0]?.message?.content) {
        responseText = response.choices[0].message.content;
      } else {
        throw new Error('La respuesta de la API no tiene el formato esperado.');
      }
      
      console.log('üìù Texto extra√≠do:', responseText);

      try {
        const cleanedText = responseText.replace(/^```json\n?/, '').replace(/\n?```$/, '');
        const strategicData = JSON.parse(cleanedText);
        console.log('‚úÖ Reporte estrat√©gico parseado con √©xito:', strategicData);

        // Construir el ReportData completo
        const reportData: ReportData = {
          aresScores,
          competencyScores,
          companyContext,
          executiveSummary: strategicData.executiveSummary,
          actionPlan: strategicData.actionPlan,
          generatedAt: new Date(),
          version: '2.0.0'
        };

        return reportData;
      } catch (parseError) {
        console.error('‚ùå Error fatal al parsear JSON estrat√©gico:', parseError, 'Texto recibido:', responseText);
        throw new Error('La respuesta de la IA no es un objeto JSON v√°lido para el reporte estrat√©gico.');
      }
    } catch (error) {
      console.error('‚ùå Error en la llamada a la API estrat√©gica:', error);
      throw error;
    }
  }

  /**
   * Construye el prompt maestro del sistema para an√°lisis estrat√©gico
   */
  private buildStrategicSystemPrompt(): string {
    return `
**System Prompt:**
Eres 'ARES-AI', un consultor estrat√©gico de IA de Sube Academia. Tu conocimiento se basa en el 'ARES-AI Framework' (Agilidad, Responsabilidad, √âtica, Sostenibilidad) y el modelo de 13 competencias de Sube Academia. Tu tarea es analizar los datos de diagn√≥stico de una empresa y generar un reporte ejecutivo en formato JSON ESTRUCTO, sin texto introductorio ni comentarios.

**Marco de Conocimiento:**

**ARES-AI Framework:**
- **Agilidad**: Cultura de colaboraci√≥n, procesos √°giles, tecnolog√≠a flexible
- **Responsabilidad**: Gobernanza, transparencia, equidad, supervisi√≥n humana
- **√âtica**: Cumplimiento normativo, privacidad, seguridad, rendici√≥n de cuentas
- **Sostenibilidad**: Impacto ambiental, social y econ√≥mico

**13 Competencias Clave:**
1. Pensamiento Cr√≠tico - An√°lisis objetivo y toma de decisiones l√≥gicas
2. Resoluci√≥n de Problemas - Abordar desaf√≠os complejos con soluciones efectivas
3. Alfabetizaci√≥n de Datos - Interpretar, analizar y comunicar informaci√≥n basada en datos
4. Comunicaci√≥n Efectiva - Transmitir ideas de manera clara y persuasiva
5. Colaboraci√≥n y Trabajo en Equipo - Trabajar efectivamente en equipos diversos
6. Creatividad e Innovaci√≥n - Generar ideas originales y soluciones innovadoras
7. Dise√±o Tecnol√≥gico - Crear soluciones tecnol√≥gicas centradas en el usuario
8. Automatizaci√≥n y Agentes IA - Implementar y gestionar sistemas automatizados
9. Adaptabilidad y Flexibilidad - Ajustarse a cambios y nuevas situaciones
10. √âtica y Responsabilidad - Actuar con integridad y responsabilidad social
11. Sostenibilidad - Considerar el impacto ambiental y social a largo plazo
12. Aprendizaje Continuo - Desarrollar habilidades constantemente
13. Liderazgo en IA - Guiar equipos en la transformaci√≥n digital

**Tu Tarea (Output Generation):**
Analiza los datos de entrada, identifica las 3 competencias con el puntaje m√°s bajo como los principales 'pain points'. Para cada una, crea una 'Iniciativa Estrat√©gica' que resuelva el problema. Conecta cada iniciativa con una dimensi√≥n del framework ARES. Genera un resumen ejecutivo que identifique el nivel de madurez y el principal desaf√≠o. Proporciona la salida EXCLUSIVAMENTE en el siguiente formato JSON:

{
  "executiveSummary": {
    "currentMaturity": "...",
    "mainChallenge": "...",
    "strategicRecommendation": "..."
  },
  "actionPlan": [
    {
      "painPoint": "...",
      "businessImpact": "...",
      "title": "...",
      "description": "...",
      "steps": [ { "title": "...", "description": "...", "expectedOutcome": "..." }, ... ],
      "kpis": [ { "name": "...", "target": "..." }, ... ],
      "timeline": "...",
      "effort": "...",
      "primaryCompetency": "ID de la competencia",
      "aresDimension": "...",
      "recommendedService": { "name": "Nombre del Curso/Asesor√≠a Relevante", "type": "Curso" }
    },
    ... (2 iniciativas m√°s)
  ]
}

**INSTRUCCIONES CR√çTICAS:**
- NO INCLUYAS NING√öN TEXTO ANTES O DESPU√âS DEL OBJETO JSON
- La respuesta debe empezar con '{' y terminar con '}'
- Usa un tono ejecutivo y estrat√©gico como McKinsey o BCG
- Conecta cada iniciativa con el framework ARES-AI
- Recomienda servicios espec√≠ficos del cat√°logo proporcionado
- Genera KPIs medibles y timelines realistas
`;
  }

  /**
   * Construye el prompt del usuario con todos los datos necesarios
   */
  private buildStrategicUserPrompt(
    aresScores: Record<string, number>,
    competencyScores: Record<string, number>,
    companyContext: any,
    contextoAdicional: any
  ): string {
    return `
**User Data (Input):**

**Contexto de la empresa:**
${JSON.stringify(companyContext, null, 2)}

**Puntuaciones ARES:**
${JSON.stringify(aresScores, null, 2)}

**Puntuaciones de Competencias:**
${JSON.stringify(competencyScores, null, 2)}

**Competencias Clave (documento de referencia):**
${JSON.stringify(competencias.map(c => ({
  id: c.id,
  name: c.name,
  cluster: c.cluster,
  description: c.description
})), null, 2)}

**Framework ARES (documento de referencia):**
{
  "Agilidad": {
    "Cultura y Colaboraci√≥n": "Integraci√≥n continua entre equipos de negocio, tecnolog√≠a y datos",
    "Procesos y Planificaci√≥n": "Metodolog√≠as √°giles y priorizaci√≥n por valor de negocio",
    "Tecnolog√≠a e Infraestructura": "Infraestructura flexible y herramientas de automatizaci√≥n"
  },
  "Responsabilidad": {
    "Gobernanza y Cumplimiento": "Comit√©s de √©tica y evaluaciones de cumplimiento normativo",
    "Transparencia y Explicabilidad": "Decisiones comprensibles y documentaci√≥n clara",
    "Equidad, Privacidad y Seguridad": "An√°lisis de sesgos y medidas de ciberseguridad",
    "Supervisi√≥n Humana": "Responsables humanos con capacidad de intervenci√≥n"
  },
  "√âtica": {
    "Cumplimiento Normativo": "Adherencia a regulaciones como AI Act",
    "Privacidad por Dise√±o": "Evaluaciones de impacto y protecci√≥n de datos",
    "Rendici√≥n de Cuentas": "Canales de apelaci√≥n y mecanismos de revisi√≥n"
  },
  "Sostenibilidad": {
    "Ambiental": "Eficiencia computacional y reducci√≥n de huella de carbono",
    "Social y Econ√≥mica": "Impacto en empleados, sociedad y alineaci√≥n con ODS"
  }
}

**Cat√°logo de Servicios Disponibles:**
${JSON.stringify(contextoAdicional, null, 2)}
`;
  }

  /**
   * Calcula las puntuaciones ARES basadas en las respuestas
   */
  private calculateAresScores(aresAnswers: any): Record<string, number> {
    const scores: Record<string, number> = {
      'Agilidad': 0,
      'Responsabilidad': 0,
      '√âtica': 0,
      'Sostenibilidad': 0
    };

    // L√≥gica para calcular puntuaciones ARES
    // Por ahora, valores de ejemplo - implementar l√≥gica real
    Object.keys(scores).forEach(dimension => {
      scores[dimension] = Math.floor(Math.random() * 40) + 30; // 30-70
    });

    return scores;
  }

  /**
   * Calcula las puntuaciones de competencias basadas en las respuestas
   */
  private calculateCompetencyScores(compAnswers: any): Record<string, number> {
    const scores: Record<string, number> = {};

    // Mapear las competencias disponibles
    competencias.forEach(comp => {
      scores[comp.id] = Math.floor(Math.random() * 40) + 30; // 30-70
    });

    return scores;
  }
}