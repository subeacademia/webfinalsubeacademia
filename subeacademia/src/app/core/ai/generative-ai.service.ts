import { Injectable, inject } from '@angular/core';
import { from, Observable, of } from 'rxjs';
import { switchMap, catchError, tap } from 'rxjs/operators';
import { environment } from '../../../environments/environment';
import { DiagnosticoFormValue, DiagnosticoScores } from '../../features/diagnostico/data/diagnostic.models';
import { DiagnosticReport } from '../../features/diagnostico/data/report.model';
import { CoursesService } from '../data/courses.service';
import { Course } from '../models';

@Injectable({
  providedIn: 'root',
})
export class GenerativeAiService {
  private coursesService = inject(CoursesService);
  private readonly geminiApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${environment.geminiApiKey}`;

  generateActionPlan(diagnosticData: DiagnosticoFormValue, scores: DiagnosticoScores, additionalPrompt?: string): Observable<DiagnosticReport | null> {
    console.log('ü§ñ Generando plan de acci√≥n con datos:', { diagnosticData, scores });
    
    return from(this.coursesService.getAllCourses()).pipe(
      switchMap(courses => {
        const formattedCoursesString = courses.map((course: Course) =>
          `- ID: ${course.id}, T√≠tulo: ${course.title}, Descripci√≥n: ${course.description}`
        ).join('\n');

        const prompt = this.buildEnhancedGeminiPrompt(diagnosticData, scores, formattedCoursesString, additionalPrompt);
        console.log('üìù Prompt enviado a Gemini:', prompt);

        const requestBody = {
          contents: [{ parts: [{ text: prompt }] }],
          generationConfig: {
            responseMimeType: "application/json",
          }
        };

        return from(
          fetch(this.geminiApiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(requestBody),
          })
          .then(response => {
            if (!response.ok) {
              throw new Error(`Error en la API de Gemini: ${response.statusText}`);
            }
            return response.json();
          })
          .then(data => {
            const responseText = data.candidates?.[0]?.content?.parts?.[0]?.text;
            if (!responseText) {
              throw new Error('Respuesta inv√°lida o vac√≠a de la API de Gemini.');
            }
            console.log('üìÑ Respuesta de Gemini:', responseText);
            return JSON.parse(responseText) as DiagnosticReport;
          })
        );
      }),
      tap(response => console.log('Reporte de IA recibido:', response)),
      catchError(error => {
        console.error('Error al generar el plan de acci√≥n:', error);
        return of(null);
      })
    );
  }

  private buildEnhancedGeminiPrompt(diagnosticData: DiagnosticoFormValue, scores: DiagnosticoScores, formattedCoursesString: string, additionalPrompt?: string): string {
    // Identificar √°reas de mejora con puntuaciones m√°s bajas
    const areasMejora = this.identifyImprovementAreas(scores);
    
    return `
      Eres un consultor senior experto en transformaci√≥n digital e IA para Sube Academia. Tu misi√≥n es entregar un an√°lisis profundo, personalizado y de alto valor que inspire acci√≥n inmediata. Tu respuesta debe ser √∫nicamente un objeto JSON, sin texto, comentarios o \`\`\`.

      **Contexto del Usuario:**
      - Rol: ${diagnosticData.segmento || 'No especificado'}
      - Industria: ${diagnosticData.contexto?.industria || 'No especificado'}
      - Objetivo Principal: ${diagnosticData.objetivo || 'No especificado'}
      - Contexto Organizacional: ${diagnosticData.segmento || 'No especificado'}

      **Resultados del Diagn√≥stico:**
      - Puntajes ARES-AI: ${JSON.stringify(scores.ares)}
      - Puntajes de Competencias: ${JSON.stringify(scores.competencias)}

      **√Åreas de Mejora Identificadas:**
      ${areasMejora.map(area => `- ${area.name}: ${area.score}/100 (${this.getScoreDescription(area.score)})`).join('\n')}

      **Cat√°logo de Cursos de Sube Academia:**
      ${formattedCoursesString}

      **Tu Tarea:**
      Genera un objeto JSON con la siguiente estructura y contenido de EXCELENTE calidad, personalizado para el contexto espec√≠fico del usuario. INCLUYE CTAs DIN√ÅMICOS basados en las √°reas de mejora identificadas:
      
      ${additionalPrompt ? `**Instrucciones Espec√≠ficas Adicionales:**\n${additionalPrompt}\n` : ''}

      {
        "titulo_informe": "Hoja de Ruta Estrat√©gica para la Adopci√≥n de IA - [Industria del Usuario]",
        "resumen_ejecutivo": "Un p√°rrafo de 4-5 frases que resuma el nivel de madurez en IA, destaque la principal fortaleza, identifique las 2-3 √°reas de mejora m√°s cr√≠ticas, y establezca el impacto potencial en el negocio. Usa lenguaje motivacional y orientado a resultados. AL FINAL del resumen, incluye un CTA espec√≠fico recomendando un producto de Sube Academia basado en las √°reas de mejora identificadas.",
        "analisis_ares": [
          {
            "dimension": "Agilidad",
            "puntaje": ${scores.ares['agilidad'] || 0},
            "analisis": "An√°lisis experto de 3-4 frases sobre las implicaciones pr√°cticas de este puntaje en 'Agilidad'. Incluye riesgos espec√≠ficos, oportunidades perdidas, y el impacto en la velocidad de innovaci√≥n. S√© espec√≠fico para la industria del usuario."
          },
          {
            "dimension": "Responsabilidad",
            "puntaje": ${scores.ares['responsabilidad'] || 0},
            "analisis": "An√°lisis experto de 3-4 frases para 'Responsabilidad'. Explica c√≥mo este puntaje afecta la gobernanza de IA, la transparencia, y la confianza de los stakeholders. Incluye ejemplos espec√≠ficos de la industria."
          },
          {
            "dimension": "√âtica",
            "puntaje": ${scores.ares['etica'] || 0},
            "analisis": "An√°lisis experto de 3-4 frases para '√âtica'. Describe el impacto en la toma de decisiones √©ticas, la prevenci√≥n de sesgos, y la reputaci√≥n corporativa. S√© espec√≠fico sobre los riesgos √©ticos en la industria del usuario."
          },
          {
            "dimension": "Sostenibilidad",
            "puntaje": ${scores.ares['sostenibilidad'] || 0},
            "analisis": "An√°lisis experto de 3-4 frases para 'Sostenibilidad'. Explica c√≥mo este puntaje afecta la eficiencia operativa, el impacto ambiental, y la viabilidad a largo plazo. Incluye m√©tricas espec√≠ficas de sostenibilidad."
          }
        ],
        "plan_de_accion": [
          {
            "area_mejora": "Nombre de la competencia o dimensi√≥n con el puntaje M√ÅS BAJO. S√© espec√≠fico y usa terminolog√≠a de la industria.",
            "descripcion_problema": "Describe en 3-4 frases el riesgo espec√≠fico, la oportunidad perdida, y el impacto cuantificable en el negocio. Incluye m√©tricas relevantes y consecuencias a corto y largo plazo.",
            "acciones_recomendadas": [
              {
                "accion": "Paso 1 (Corto Plazo - 0-3 meses): Una acci√≥n concreta, medible y ejecutable inmediatamente.",
                "detalle": "Explica en 3-4 l√≠neas el 'c√≥mo', 'porqu√©', 'cu√°ndo' y 'qui√©n' debe ejecutar esta acci√≥n. Incluye m√©tricas de √©xito y recursos necesarios.",
                "curso_recomendado_id": "El ID del curso M√ÅS relevante. Si ninguno aplica, usa 'null'."
              },
              {
                "accion": "Paso 2 (Mediano Plazo - 3-6 meses): Una acci√≥n que construya sobre la anterior y genere momentum.",
                "detalle": "Explica en 3-4 l√≠neas c√≥mo esta acci√≥n se conecta con la anterior, qu√© resultados esperar, y c√≥mo medir el progreso. Incluye dependencias y riesgos.",
                "curso_recomendado_id": "El ID del curso M√ÅS relevante. Si ninguno aplica, usa 'null'."
              },
              {
                "accion": "Paso 3 (Largo Plazo - 6-12 meses): Una acci√≥n estrat√©gica que transforme la organizaci√≥n.",
                "detalle": "Explica en 3-4 l√≠neas la visi√≥n a largo plazo, el impacto transformacional, y c√≥mo esta acci√≥n posiciona a la organizaci√≥n para el futuro. Incluye m√©tricas de transformaci√≥n.",
                "curso_recomendado_id": "El ID del curso M√ÅS relevante. Si ninguno aplica, usa 'null'."
              }
            ]
          },
          {
            "area_mejora": "Nombre de la SEGUNDA competencia o dimensi√≥n con puntaje m√°s bajo. S√© espec√≠fico y contextual.",
            "descripcion_problema": "Describe en 3-4 frases el riesgo espec√≠fico, la oportunidad perdida, y el impacto en el negocio. Conecta con la primera √°rea de mejora.",
            "acciones_recomendadas": [
              {
                "accion": "Paso 1 (Corto Plazo): Una acci√≥n concreta que complemente la primera √°rea de mejora.",
                "detalle": "Explica en 3-4 l√≠neas c√≥mo esta acci√≥n se alinea con la estrategia general y genera sinergias. Incluye m√©tricas de √©xito.",
                "curso_recomendado_id": "El ID del curso M√ÅS relevante. Si ninguno aplica, usa 'null'."
              },
              {
                "accion": "Paso 2 (Mediano Plazo): Una acci√≥n que consolide los avances y genere valor sostenible.",
                "detalle": "Explica en 3-4 l√≠neas c√≥mo esta acci√≥n crea capacidades duraderas y prepara para el siguiente nivel de madurez.",
                "curso_recomendado_id": "El ID del curso M√ÅS relevante. Si ninguno aplica, usa 'null'."
              }
            ]
          }
        ],
        "cta_dinamico": {
          "titulo": "Producto Recomendado para ${areasMejora[0]?.name || 'Mejora Inmediata'}",
          "descripcion": "Descripci√≥n de 2-3 frases del producto m√°s relevante basado en las √°reas de mejora identificadas. Explica por qu√© es la soluci√≥n ideal para este usuario espec√≠fico.",
          "tipo_producto": "curso|asesoria|certificacion",
          "producto_id": "ID del producto recomendado",
          "url_producto": "/productos/[tipo]/[id]",
          "beneficios_clave": [
            "Beneficio 1 espec√≠fico para el √°rea de mejora",
            "Beneficio 2 que resuelva el problema identificado",
            "Beneficio 3 de impacto transformacional"
          ]
        }
      }

      **Instrucciones Especiales:**
      1. Personaliza cada an√°lisis para la industria espec√≠fica del usuario
      2. Usa lenguaje motivacional y orientado a resultados
      3. Incluye m√©tricas espec√≠ficas y cuantificables
      4. Conecta las acciones entre s√≠ para crear una estrategia coherente
      5. S√© espec√≠fico sobre el impacto en el negocio
      6. Usa terminolog√≠a t√©cnica apropiada para el nivel del usuario
      7. Incluye consideraciones de riesgo y mitigaci√≥n
      8. Enf√≥cate en la ejecuci√≥n pr√°ctica y medible
      9. **IMPORTANTE**: El CTA din√°mico debe ser espec√≠fico y relevante para las √°reas de mejora identificadas
      10. **IMPORTANTE**: El resumen ejecutivo debe terminar con una recomendaci√≥n de producto espec√≠fica
    `;
  }

  private identifyImprovementAreas(scores: DiagnosticoScores): Array<{name: string, score: number}> {
    const allScores: Array<{name: string, score: number}> = [];
    
    // A√±adir scores ARES
    if (scores.ares) {
      Object.entries(scores.ares).forEach(([name, score]) => {
        if (typeof score === 'number') {
          allScores.push({ name: `ARES-${name}`, score });
        }
      });
    }
    
    // A√±adir scores de competencias
    if (scores.competencias) {
      Object.entries(scores.competencias).forEach(([name, score]) => {
        if (typeof score === 'number') {
          allScores.push({ name, score });
        }
      });
    }

    // Ordenar por puntuaci√≥n (m√°s baja primero) y tomar las 3 peores
    return allScores
      .sort((a, b) => a.score - b.score)
      .slice(0, 3);
  }

  private getScoreDescription(score: number): string {
    if (score >= 80) return 'Excelente';
    if (score >= 60) return 'Bueno';
    if (score >= 40) return 'Regular';
    return 'Cr√≠tico';
  }

  /**
   * Genera texto usando la API de Gemini
   * @param prompt El prompt para generar el texto
   * @returns Promise con el texto generado o null si hay error
   */
  async generateText(prompt: string): Promise<string | null> {
    try {
      const requestBody = {
        contents: [{ parts: [{ text: prompt }] }],
        generationConfig: {
          maxOutputTokens: 800,
          temperature: 0.3, // Temperatura m√°s baja para respuestas m√°s consistentes
          topP: 0.8,
          topK: 40,
        }
      };

      const response = await fetch(this.geminiApiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        throw new Error(`Error en la API de Gemini: ${response.statusText}`);
      }

      const data = await response.json();
      const responseText = data.candidates?.[0]?.content?.parts?.[0]?.text;
      
      if (!responseText) {
        throw new Error('Respuesta inv√°lida o vac√≠a de la API de Gemini.');
      }

      return responseText;
    } catch (error) {
      console.error('Error al generar texto con Gemini:', error);
      return null;
    }
  }
}
