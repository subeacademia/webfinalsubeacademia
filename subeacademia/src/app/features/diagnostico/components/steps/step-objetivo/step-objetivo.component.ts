import { Component, inject, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { DiagnosticStateService } from '../../../services/diagnostic-state.service';
import { GenerativeAiService } from '../../../../../core/ai/generative-ai.service';

@Component({
  selector: 'app-step-objetivo',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './step-objetivo.component.html',
  styles: [`
    .animate-fade-in {
      animation: fadeIn 0.6s ease-out;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .btn-primary {
      @apply bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white rounded-lg;
    }

    .form-group {
      @apply space-y-2;
    }

    textarea {
      @apply font-sans;
    }

    textarea:focus {
      @apply outline-none;
    }
  `]
})
export class StepObjetivoComponent implements OnInit {
  private readonly fb = inject(FormBuilder);
  private readonly stateService = inject(DiagnosticStateService);
  private readonly router = inject(Router);
  private readonly generativeAiService = inject(GenerativeAiService);

  objectiveForm!: FormGroup;
  suggestions: string[] = [];
  selectedSuggestions: string[] = [];
  isLoadingSuggestions = false;

  ngOnInit(): void {
    this.initializeForm();
    this.loadExistingData();
    this.getObjectiveSuggestions();
  }

  private initializeForm(): void {
    this.objectiveForm = this.fb.group({
      mainObjective: ['', [Validators.required, Validators.minLength(20)]]
    });
  }

  private loadExistingData(): void {
    const existingObjective = this.stateService.form.get('objetivo')?.value;
    if (existingObjective) {
      this.objectiveForm.patchValue({
        mainObjective: existingObjective
      });
    }
  }

  async getObjectiveSuggestions(): Promise<void> {
    this.isLoadingSuggestions = true;
    
    // Limpiar sugerencias anteriores y selecci√≥n
    this.suggestions = [];
    this.selectedSuggestions = [];
    
    try {
      // Obtener datos del diagn√≥stico para personalizar al m√°ximo
      const contextoData = this.stateService.getContextoData();
      const segmento = this.stateService.form.get('segmento')?.value;
      const aresData = this.stateService.aresForm.value;
      const competenciasData = this.stateService.competenciasForm.value;
      
      console.log('üìä Datos del contexto obtenidos:', contextoData);
      console.log('üéØ Segmento del usuario:', segmento);
      
      if (contextoData && contextoData.industria && contextoData.tamano && contextoData.presupuesto) {
        // Crear un prompt m√°s personalizado y detallado con todo el diagn√≥stico disponible
        const contextPrompt = `Eres un consultor experto en transformaci√≥n digital e IA.

Basado en el siguiente perfil y resultados preliminares del diagn√≥stico, genera EXACTAMENTE 4 objetivos de negocio espec√≠ficos, accionables y personalizados para implementar IA.

Perfil de la organizaci√≥n:
- Sector/Industria: ${contextoData.industria}
- Tama√±o: ${contextoData.tamano}
- Presupuesto disponible: ${contextoData.presupuesto}
- Segmento/Tipo de organizaci√≥n: ${segmento || 'empresa'}

Resultados del diagn√≥stico (valores 1-5):
- ARES (dimensiones clave): ${JSON.stringify(aresData)}
- Competencias (habilidades): ${JSON.stringify(competenciasData)}

Instrucciones:
1) Devuelve exactamente 4 objetivos distintos enfocados en resultados de negocio.
2) Aterriza los objetivos a la industria, tama√±o y presupuesto informados.
3) Usa el diagn√≥stico (ARES/competencias) para priorizar d√≥nde impactar primero.
4) Cada objetivo debe ser medible (incluye una m√©trica/indicador) y accionable.
5) Responde SOLO con un array JSON de strings sin texto adicional.

Ejemplo de salida v√°lida:
["Reducir el tiempo de ciclo en un 25% mediante automatizaci√≥n de procesos en atenci√≥n al cliente", "...", "...", "..."]`;

        console.log('ü§ñ Enviando prompt personalizado a IA:', contextPrompt);

        // Usar el servicio de IA para generar sugerencias
        const response = await this.generativeAiService.generateText(contextPrompt);
        if (response) {
          try {
            // Algunas veces la IA env√≠a texto con explicaciones o ```json
            const jsonMatch = response.match(/\[([\s\S]*?)\]/);
            const rawJson = jsonMatch ? `[${jsonMatch[1]}]` : response;
            const parsedSuggestions = JSON.parse(rawJson);
            if (Array.isArray(parsedSuggestions) && parsedSuggestions.length > 0) {
              // Limitar a m√°ximo 4 sugerencias
              this.suggestions = parsedSuggestions.slice(0, 4);
              console.log('‚úÖ Sugerencias personalizadas generadas por IA:', this.suggestions);
            } else {
              console.warn('‚ö†Ô∏è Respuesta de IA no es un array v√°lido:', parsedSuggestions);
              this.setDefaultSuggestions();
            }
          } catch (parseError) {
            console.error('‚ùå Error al parsear sugerencias:', parseError);
            console.log('üìù Respuesta cruda de IA:', response);
            this.setDefaultSuggestions();
          }
        } else {
          console.warn('‚ö†Ô∏è No se recibi√≥ respuesta de la IA');
          this.setDefaultSuggestions();
        }
      } else {
        console.warn('‚ö†Ô∏è No hay datos de contexto completos, usando sugerencias por defecto');
        this.setDefaultSuggestions();
      }
    } catch (error) {
      console.error('‚ùå Error al generar sugerencias:', error);
      this.setDefaultSuggestions();
    } finally {
      this.isLoadingSuggestions = false;
    }
  }

  private setDefaultSuggestions(): void {
    // Intentar generar sugerencias heur√≠sticas usando el contexto disponible
    const contextoData = this.stateService.getContextoData();
    const segmento = this.stateService.form.get('segmento')?.value as string | null;
    const industria = contextoData?.industria;
    const presupuesto = contextoData?.presupuesto;

    const heuristic = this.buildHeuristicSuggestions({ industria: industria || null, tamano: contextoData?.tamano || null, presupuesto: presupuesto || null }, segmento || null);
    if (heuristic.length === 4) {
      this.suggestions = heuristic;
      console.log('‚úÖ Sugerencias heur√≠sticas generadas (fallback inteligente):', this.suggestions);
      return;
    }
    
    if (industria) {
      // Sugerencias espec√≠ficas por industria
      const industrySuggestions: Record<string, string[]> = {
        'tecnologia': [
          'Automatizar el desarrollo de software con herramientas de IA generativa',
          'Implementar an√°lisis predictivo para mejorar la experiencia del usuario',
          'Optimizar la infraestructura cloud con IA para reducir costos',
          'Crear chatbots inteligentes para soporte t√©cnico 24/7'
        ],
        'salud': [
          'Implementar diagn√≥stico asistido por IA para mejorar la precisi√≥n m√©dica',
          'Automatizar la gesti√≥n de citas y recordatorios para pacientes',
          'Optimizar la gesti√≥n de inventario de medicamentos con IA predictiva',
          'Crear sistemas de monitoreo remoto de pacientes con IA'
        ],
        'finanzas': [
          'Implementar detecci√≥n de fraude en tiempo real con IA',
          'Automatizar la evaluaci√≥n de riesgo crediticio con machine learning',
          'Optimizar la gesti√≥n de carteras de inversi√≥n con IA predictiva',
          'Crear chatbots financieros para atenci√≥n al cliente'
        ],
        'retail': [
          'Implementar recomendaciones personalizadas de productos con IA',
          'Optimizar la gesti√≥n de inventario con IA predictiva',
          'Automatizar la atenci√≥n al cliente con chatbots inteligentes',
          'Crear an√°lisis de sentimiento para mejorar la experiencia del cliente'
        ],
        'manufactura': [
          'Implementar mantenimiento predictivo con sensores IoT y IA',
          'Optimizar la calidad del producto con visi√≥n por computadora',
          'Automatizar la planificaci√≥n de producci√≥n con IA',
          'Crear sistemas de control de calidad inteligentes'
        ],
        'educacion': [
          'Implementar tutor√≠a personalizada con IA adaptativa',
          'Automatizar la evaluaci√≥n de tareas y ex√°menes',
          'Crear contenido educativo personalizado con IA generativa',
          'Optimizar la gesti√≥n administrativa con IA'
        ]
      };
      
      // Buscar sugerencias espec√≠ficas para la industria
      const normalizedIndustria = industria.toLowerCase();
      for (const [key, suggestions] of Object.entries(industrySuggestions)) {
        if (normalizedIndustria.includes(key) || key.includes(normalizedIndustria)) {
          this.suggestions = suggestions;
          console.log('‚úÖ Sugerencias por defecto espec√≠ficas para industria:', industria);
          return;
        }
      }
    }
    
    // Sugerencias gen√©ricas si no hay industria espec√≠fica
    this.suggestions = [
      'Optimizar procesos internos para aumentar la eficiencia operativa',
      'Mejorar la experiencia del cliente mediante personalizaci√≥n con IA',
      'Aumentar las ventas a trav√©s de an√°lisis predictivo y automatizaci√≥n',
      'Reducir costos operativos mediante automatizaci√≥n inteligente'
    ];
    
    console.log('‚úÖ Sugerencias gen√©ricas por defecto aplicadas');
  }

  // Fallback inteligente cuando la IA remota no responde o el contexto es parcial
  private buildHeuristicSuggestions(contexto: { industria: string | null; tamano: string | null; presupuesto: string | null }, segmento: string | null): string[] {
    if (!contexto.industria && !contexto.presupuesto && !segmento) {
      return [];
    }

    const ind = (contexto.industria || '').toLowerCase();
    const pres = (contexto.presupuesto || '').toLowerCase();
    const seg = (segmento || 'organizaci√≥n');

    const byIndustry = () => {
      if (ind.includes('salud')) return ['telesoporte y triage de pacientes', 'gesti√≥n de citas e inasistencias'];
      if (ind.includes('finan')) return ['detecci√≥n de fraude en tiempo real', 'scoring de riesgo crediticio'];
      if (ind.includes('retail') || ind.includes('consumo') || ind.includes('e-commerce')) return ['recomendaciones personalizadas', 'optimizaci√≥n de inventario'];
      if (ind.includes('manufact')) return ['mantenimiento predictivo', 'control de calidad con visi√≥n'];
      if (ind.includes('educ')) return ['tutor√≠a adaptativa', 'automatizaci√≥n de evaluaci√≥n'];
      return ['automatizaci√≥n back-office', 'asistentes para atenci√≥n'];
    };

    const [focus1, focus2] = byIndustry();

    let presupuestoNota = 'con foco en quick wins';
    if (pres.includes('bajo')) presupuestoNota = 'priorizando herramientas low-code/no-code';
    else if (pres.includes('medio')) presupuestoNota = 'comenzando con 1‚Äì2 PoC y m√©tricas claras';
    else if (pres.includes('alto') || pres.includes('muy')) presupuestoNota = 'incluyendo MLOps y escalamiento a producci√≥n';

    // Cuatro objetivos concretos y medibles
    const objs: string[] = [
      `Implementar ${focus1} para ${seg} y reducir tiempos en 20‚Äì30% en 90 d√≠as (${presupuestoNota}).`,
      `Desplegar ${focus2} para ${seg} logrando +10‚Äì15% en KPI principal en 6 meses (${presupuestoNota}).`,
      `Establecer governance y m√©tricas de impacto de IA (OKRs trimestrales) alineadas a presupuesto ${contexto.presupuesto || 'estimado'}.`,
      `Capacitar al equipo clave y documentar 3 casos de uso priorizados para pasar a piloto en 60‚Äì90 d√≠as.`
    ];

    return objs;
  }

  toggleSuggestion(suggestion: string): void {
    if (this.selectedSuggestions.includes(suggestion)) {
      this.selectedSuggestions = this.selectedSuggestions.filter(s => s !== suggestion);
    } else {
      this.selectedSuggestions.push(suggestion);
    }
  }

  applySelectedSuggestions(): void {
    if (this.selectedSuggestions.length > 0) {
      // Combinar sugerencias de manera m√°s coherente
      let combinedText = '';
      
      if (this.selectedSuggestions.length === 1) {
        combinedText = this.selectedSuggestions[0];
      } else {
        // Para m√∫ltiples sugerencias, crear un texto m√°s estructurado
        const objectives = this.selectedSuggestions.map((suggestion, index) => {
          // Limpiar la sugerencia y asegurar que termine con punto
          let cleanSuggestion = suggestion.trim();
          if (!cleanSuggestion.endsWith('.')) {
            cleanSuggestion += '.';
          }
          return cleanSuggestion;
        });
        
        combinedText = `Mi objetivo principal con la implementaci√≥n de IA en mi organizaci√≥n es: ${objectives.join(' ')}`;
      }
      
      this.objectiveForm.patchValue({
        mainObjective: combinedText
      });
      
      // Limpiar selecci√≥n
      this.selectedSuggestions = [];
      
      // Scroll suave al textarea
      const textarea = document.getElementById('mainObjective');
      if (textarea) {
        textarea.scrollIntoView({ behavior: 'smooth', block: 'center' });
        textarea.focus();
      }
      
      // Mostrar mensaje de confirmaci√≥n
      console.log('‚úÖ Sugerencias aplicadas:', combinedText);
    }
  }

  selectSuggestion(suggestion: string): void {
    this.objectiveForm.patchValue({
      mainObjective: suggestion
    });
    
    // Scroll suave al textarea
    const textarea = document.getElementById('mainObjective');
    if (textarea) {
      textarea.scrollIntoView({ behavior: 'smooth', block: 'center' });
      textarea.focus();
    }
  }

  onSubmit(): void {
    if (this.objectiveForm.valid) {
      const formData = this.objectiveForm.value;
      
      // Guardar en el servicio de estado
      this.stateService.form.patchValue({
        objetivo: formData.mainObjective
      });

      // Navegar al siguiente paso
      this.navigateToNextStep();
    }
  }

  private navigateToNextStep(): void {
    const currentUrl = this.router.url;
    const baseUrl = currentUrl.split('/').slice(0, -1).join('/');
    const nextStepUrl = `${baseUrl}/lead`;
    
    this.router.navigate([nextStepUrl]).catch(error => {
      console.error('Error en navegaci√≥n:', error);
      // Fallback: navegar usando la ruta completa
      this.router.navigate(['/es', 'diagnostico', 'lead']);
    });
  }
}
